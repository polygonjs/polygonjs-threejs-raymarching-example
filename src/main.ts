import * as THREE from 'three';

// init

const camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );
camera.position.set(2,2,2);
camera.lookAt(new THREE.Vector3(0,0,0));

const scene = new THREE.Scene();

const geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );
const material = new THREE.MeshNormalMaterial();

const mesh = new THREE.Mesh( geometry, material );
scene.add( mesh );

const renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setSize( window.innerWidth, window.innerHeight );
renderer.setAnimationLoop( animation );
document.body.appendChild( renderer.domElement );

// 1. import the polygonjs scene
import { fetchSceneAndMount_scene_01 } from './polygonjs/scenes/scene_01/autogenerated/fetchSceneAndMount';
import { PolySceneWithNodeMap_scene_01 } from './polygonjs/scenes/scene_01/autogenerated/PolySceneWithNodeMap';
let polygonjsScene: PolySceneWithNodeMap_scene_01|undefined;
fetchSceneAndMount_scene_01({
  createViewer:false, autoPlay:true
}).then(loadedData=>{
  polygonjsScene = loadedData.scene;
  // 2. add the threejs scene created by polygonjs to our original threejs scene
  scene.add(polygonjsScene.threejsScene());
})

// animation

const clock = new THREE.Clock()
function animation( time:number ) {
  const delta = clock.getDelta();

  // 3. we make sure to run .update(delta) on the polygonjs scene
  polygonjsScene?.update(delta);

	mesh.rotation.x = time / 2000;
	mesh.rotation.y = time / 1000;

	renderer.render( scene, camera );

}